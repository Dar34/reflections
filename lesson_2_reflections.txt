1.  What happens when you initialize a repository? Why do you need to do it?
	
	A hidden directory (.git) is created. This directory will house the meta data
	that tracks changes in your files.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

		Staging area holds files that are going into the repository as a single commit. The repository holds all commits,
		and the working directory holds all the files that are available to add to the commit.
		
How can you use the staging area to make sure you have one commit per logical change?

		You can compare the changes that you are adding to those already in the Repository. And compare to those proposed in
		the working directory.
		
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

		Experimental changes, Porting to a different OS, seperate versions, etc
			
How do the diagrams help you visualize the branch structure?

		They are tree diagrams, thus they show branches. More importantly, they let you see which changes each branch 
		does and does not contain.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

		All of the commits from both branches are add into one 'lineage'. The new HEAD going forward
		has two parents rather than one.
				
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
		
		Pros
			Quicker
			Easier
			Conflicts are caught by Git
		Cons
			Because it does not make code, it can not catch changes that will cause a bug. A manual merge might catch these
			
				
				
		
